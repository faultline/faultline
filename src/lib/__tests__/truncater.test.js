'use strict';
const describe = require('mocha').describe;
const it = require('mocha').it;
const assert = require('power-assert');
const truncater = require('../truncater');
const { getByteLength } = require('../functions');

describe('truncater', () => {
    it ('truncateMessage("short string") -> "short string"', () => {
        assert(truncater.truncateMessage('short string') === 'short string');
    });

    it ('truncateMessage("long long string") -> prefix + hash)', () => {
        const longLongString = '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789';
        const truncated = getByteLength(truncater.truncateMessage(longLongString)) + 'projects/'.length + 256 + '/errors/'.length + '/occurrences/0000000000000000.json'.length;
        assert(truncated === 1024);
    });

    it ('truncateTitle("short string") -> "short string"', () => {
        assert(truncater.truncateTitle('short string') === 'short string');
    });

    it ('truncateTitle("long long string") -> prefix + minHash)', () => {
        const longLongString = '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789'
              + '0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789';
        const truncated = getByteLength(truncater.truncateTitle(longLongString));
        assert(truncated === 250);
    });
});
