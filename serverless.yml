service: ${self:provider.environment.FAULTLINE_SERVICE_NAME}

frameworkVersion: ">=1.21.1 <2.0.0"

provider:
  name: aws
  environment:
    FAULTLINE_STAGE: ${env:FAULTLINE_STAGE, 'v0'}
    FAULTLINE_SERVICE_NAME: ${env:FAULTLINE_SERVICE_NAME, file(./config.yml):serviceName, 'faultline'}
    FAULTLINE_REGION: ${env:FAULTLINE_REGION, file(./config.yml):region, 'ap-northeast-1'}
    FAULTLINE_S3_BUCKET_NAME: ${env:FAULTLINE_S3_BUCKET_NAME, file(./config.yml):s3BucketName}
    FAULTLINE_DYNAMODB_TABLE_PREFIX: ${env:FAULTLINE_DYNAMODB_TABLE_PREFIX, file(./config.yml):dynamodbTablePrefix, 'faultline'}
    FAULTLINE_TIMEUNIT: ${env:FAULTLINE_TIMEUNIT, file(./config.yml):timeunit, 'minute'}
    FAULTLINE_MASTER_API_KEY: ${env:FAULTLINE_MASTER_API_KEY, file(./config.yml):masterApiKey}
    FAULTLINE_CLIENT_API_KEY: ${env:FAULTLINE_CLIENT_API_KEY, file(./config.yml):clientApiKey}
    FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS: ${env:FAULTLINE_ERROR_DATA_RETENTION_IN_DAYS, file(./config.yml):errorDataRetentionInDays, '-1'}
    FAULTLINE_LOG_RETENTION_IN_DAYS: ${env:FAULTLINE_LOG_RETENTION_IN_DAYS, file(./config.yml):logRetentionInDays, '180'}
    FAULTLINE_USE_KMS: ${env:FAULTLINE_USE_KMS, file(./config.yml):useKms, '0'}
    FAULTLINE_KMS_KEY_ALIAS: ${env:FAULTLINE_KMS_KEY_ALIAS, file(./config.yml):kmsKeyAlias, 'faultline'}
  runtime: nodejs6.10
  stage: ${self:provider.environment.FAULTLINE_STAGE}
  region: ${self:provider.environment.FAULTLINE_REGION}
  timeout: 10
  cfLogs: true
  apiKey: false
  iamRoleStatements:
    - Effect: Allow
      Resource:
        - { "Fn::Join" : ["", ["arn:aws:dynamodb:", "${self:provider.environment.FAULTLINE_REGION}", ":*:*" ] ] }
      Action:
        - "dynamodb:*"
    - Effect: Allow
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - { "Fn::Join" : ["", ["arn:aws:s3:::", "${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}"] ] }
        - Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - ${self:provider.environment.FAULTLINE_S3_BUCKET_NAME}
            - "/*"
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
      Resource:
        - "arn:aws:lambda:${self:provider.environment.FAULTLINE_REGION}:*:function:faultline-${self:provider.stage}-callNotifications"
    - Effect: Allow
      Action:
        - "kms:Encrypt"
        - "kms:Decrypt"
        - "kms:ListAliases"
      Resource:
        - "*"

package:
  include:
    - serverless.yml
    - src/**
  exclude:
    - .git/**
    - doc/**
    - node_modules/serverless/**

plugins:
  - faultline-env-checker
  - faultline-resources

functions:
  projectsList:
    handler: src/handlers/projects/get.list
    events:
      - http:
          path: projects
          method: get
          cors: true
          integration: lambda-proxy
  projectsDelete:
    handler: src/handlers/projects/delete.delete
    timeout: 30
    events:
      - http:
          path: projects/{project}
          method: delete
          cors: true
          integration: lambda-proxy
  errorsPost:
    handler: src/handlers/errors/post.post
    events:
      - http:
          path: projects/{project}/errors
          method: post
          integration: lambda-proxy
  errorsList:
    handler: src/handlers/errors/get.list
    events:
      - http:
          path: projects/{project}/errors
          method: get
          cors: true
          integration: lambda-proxy
  errorsGet:
    handler: src/handlers/errors/get.get
    events:
      - http:
          path: projects/{project}/errors/{message}
          method: get
          cors: true
          integration: lambda-proxy
  errorsPatch:
    handler: src/handlers/errors/patch.patch
    events:
      - http:
          path: projects/{project}/errors/{message}
          method: patch
          cors: true
          integration: lambda-proxy
  errorsDelete:
    handler: src/handlers/errors/delete.delete
    timeout: 30
    events:
      - http:
          path: projects/{project}/errors/{message}
          method: delete
          cors: true
          integration: lambda-proxy
  occurrencesList:
    handler: src/handlers/occurrences/get.list
    events:
      - http:
          path: projects/{project}/errors/{message}/occurrences
          method: get
          cors: true
          integration: lambda-proxy
  occurrencesGet:
    handler: src/handlers/occurrences/get.get
    events:
      - http:
          path: projects/{project}/errors/{message}/occurrences/{reversedUnixtime}
          method: get
          cors: true
          integration: lambda-proxy
  callNotifications:
    handler: src/handlers/notifications.call
    name: faultline-${self:provider.stage}-callNotifications
    timeout: 30
  encrypt:
    handler: src/handlers/util.encrypt
    events:
      - http:
          path: encrypt
          method: post
          integration: lambda-proxy
